//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0-rc.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ballot")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ballot_adjudicator::Entity")]
    BallotAdjudicator,
    #[sea_orm(has_many = "super::adjudicator_speech_score::Entity")]
    AdjudicatorSpeechScore,
    #[sea_orm(has_many = "super::adjudicator_team_score::Entity")]
    AdjudicatorTeamScore,
    #[sea_orm(has_many = "super::ballot_speech::Entity")]
    BallotSpeech,
    #[sea_orm(has_many = "super::ballot_team::Entity")]
    BallotTeam,
    #[sea_orm(has_many = "super::debate::Entity")]
    Debate,
}

impl Related<super::adjudicator_speech_score::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdjudicatorSpeechScore.def()
    }
}

impl Related<super::adjudicator_team_score::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdjudicatorTeamScore.def()
    }
}

impl Related<super::ballot_speech::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BallotSpeech.def()
    }
}

impl Related<super::ballot_team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BallotTeam.def()
    }
}

impl Related<super::debate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Debate.def()
    }
}

impl Related<super::ballot_adjudicator::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BallotAdjudicator.def()
    }
}

impl Related<super::adjudicator::Entity> for Entity {
    fn to() -> RelationDef {
        super::ballot_adjudicator::Relation::Adjudicator.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::ballot_adjudicator::Relation::Ballot.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
