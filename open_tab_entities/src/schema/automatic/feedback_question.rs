//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0-rc.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "feedback_question")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub short_name: String,
    pub full_name: String,
    pub description: String,
    pub question_config: String,

    pub tournament_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::feedback_form::Entity> for Entity {
    fn to() -> RelationDef {
        super::feedback_form_question::Relation::FeedbackForm.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::feedback_form_question::Relation::FeedbackQuestion
                .def()
                .rev(),
        )
    }
}

impl Related<super::feedback_response::Entity> for Entity {
    fn to() -> RelationDef {
        super::feedback_response_value::Relation::FeedbackResponse.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::feedback_response_value::Relation::FeedbackQuestion
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
